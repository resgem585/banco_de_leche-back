# Definición de tipos

type User {
  _id: ID
  email: String
  password: String
}

type Donante {
  _id: ID!
  tipo: String
  firstName: String
  lastName: String
  edad: Int
  direccion: String
  ocupacion: String
  partos: Int
  cesareas: Int
  apellidosRNLactante: String
  sdg: Int
  fechaNacimRN: String
  complicacionesEmbarazo: String
  transfusionesUltimos5Anos: String
  tatuajesPiercingsAcupunturaUltimoAno: String
  tratamientoMedico: String
  pruebaRapidaSifilis: String
  pruebaRapidaVIH: String
  pruebaRapidaHepatitisC: String
  observaciones: String
  createdAt: String
  updatedAt: String
  control: Control
}

type Control {
  _id: ID!
  numeroLeche: String
  tipoLeche: String
  tipoDonacion: String
  donadora: String
  ml: Float
  fechaExtraccion: String
  horaExtraccion: String
  sdg: Int
  embalaje: String
  suciedad: String
  color: String
  olor: String
  crematocrito: Float
  acidezDornic: Float
  observaciones: String
  donante: Donante            # Relación uno a uno con Donante
  crematocritoData: Crematocrito  # Relación uno a uno con Crematocrito
  acidezDornicData: AcidezDornic  # Relación uno a uno con AcidezDornic
  createdAt: String
  updatedAt: String
}

type Crematocrito {
  _id: ID!
  numeroLeche: Control         # Relación con el modelo Control
  columnaTotal1: Float
  columnaTotal2: Float
  columnaTotal3: Float
  promTotal: Float
  columnaCrema1: Float
  columnaCrema2: Float
  columnaCrema3: Float
  promCrema: Float
  porcentajeCrema: Float
  porcentajeGrasa: Float
  kcalLitro: Float
  observaciones: String
  createdAt: String
  updatedAt: String
}

type AcidezDornic {
  _id: ID!
  numeroLeche: Control         # Relación con el modelo Control
  m1: Float
  m2: Float
  m3: Float
  prom: Float
  fact: Float
  resultado: Float
  obs: String
  createdAt: String
  updatedAt: String
}

# Inputs para crear o actualizar controles
input ControlInput {
  numeroLeche: String
  tipoLeche: String
  tipoDonacion: String
  donadora: String
  ml: Float
  fechaExtraccion: String
  horaExtraccion: String
  sdg: Int
  embalaje: String
  suciedad: String
  color: String
  olor: String
  crematocrito: Float
  acidezDornic: Float
  observaciones: String
  donanteId: ID
}

# Inputs para crear o actualizar crematocritos
input CrematocritoInput {
  numeroLeche: ID             # Relación con el ID de Control
  columnaTotal1: Float
  columnaTotal2: Float
  columnaTotal3: Float
  promTotal: Float
  columnaCrema1: Float
  columnaCrema2: Float
  columnaCrema3: Float
  promCrema: Float
  porcentajeCrema: Float
  porcentajeGrasa: Float
  kcalLitro: Float
  observaciones: String
}

# Inputs para crear o actualizar acidez dornic
input AcidezDornicInput {
  numeroLeche: ID             # Relación con el ID de Control
  m1: Float
  m2: Float
  m3: Float
  prom: Float
  fact: Float
  resultado: Float
  obs: String
}

# Input para los datos de Donante
input DonanteInput {
  tipo: String
  firstName: String
  lastName: String
  edad: Int
  direccion: String
  ocupacion: String
  partos: Int
  cesareas: Int
  apellidosRNLactante: String
  sdg: Int
  fechaNacimRN: String
  complicacionesEmbarazo: String
  transfusionesUltimos5Anos: String
  tatuajesPiercingsAcupunturaUltimoAno: String
  tratamientoMedico: String
  pruebaRapidaSifilis: String
  pruebaRapidaVIH: String
  pruebaRapidaHepatitisC: String
  observaciones: String
}

# Consultas disponibles
type Query {
  getUser: [User]
  login(email: String, password: String): User
  donantes: [Donante!]!
  donante(id: ID!): Donante
  controles: [Control!]!
  control(id: ID!): Control
  controlPorDonante(donanteId: ID!): Control
  crematocritos: [Crematocrito!]!
  crematocrito(id: ID!): Crematocrito
  acidecesDornic: [AcidezDornic!]!
  acidezDornic(id: ID!): AcidezDornic
}

# Mutaciones disponibles
type Mutation {
  # Usuario
  createUser(email: String!, password: String!): User!
  updateUser(_id: ID!, email: String, password: String): User
  deleteUser(_id: ID!): User

  # Donante
  createDonante(input: DonanteInput!): Donante!
  updateDonante(id: ID!, input: DonanteInput!): Donante!
  deleteDonante(id: ID!): String!

  # Control
  createControl(input: ControlInput!): Control!
  updateControl(id: ID!, input: ControlInput!): Control!
  deleteControl(id: ID!): String!

  # Crematocrito
  createCrematocrito(input: CrematocritoInput!): Crematocrito!
  updateCrematocrito(id: ID!, input: CrematocritoInput!): Crematocrito!
  deleteCrematocrito(id: ID!): String!

  # Acidez Dornic
  createAcidezDornic(input: AcidezDornicInput!): AcidezDornic!
  updateAcidezDornic(id: ID!, input: AcidezDornicInput!): AcidezDornic!
  deleteAcidezDornic(id: ID!): String!
}
